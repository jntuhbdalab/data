-- buyer_data_setup_and_queries.cql

-- Create keyspace
CREATE KEYSPACE IF NOT EXISTS buyer_events 
WITH replication = {'class' : 'SimpleStrategy', 'replication_factor' : 1};

-- Use the buyer_events keyspace
USE buyer_events;

-- Create buyers table
CREATE TABLE IF NOT EXISTS buyers (
  buyer_id INT PRIMARY KEY,
  username TEXT,
  email TEXT,
  address TEXT
);

-- Insert data into buyers table
INSERT INTO buyers (buyer_id, username, email, address) VALUES (1, 'user1', 'user1@example.com', 'hyd');
INSERT INTO buyers (buyer_id, username, email, address) VALUES (2, 'user2', 'user2@example.com', 'mum');
INSERT INTO buyers (buyer_id, username, email, address) VALUES (3, 'user3', 'user3@example.com', 'pun');
INSERT INTO buyers (buyer_id, username, email, address) VALUES (4, 'user4', 'user4@example.com', 'hyd');
INSERT INTO buyers (buyer_id, username, email, address) VALUES (5, 'user5', 'user5@example.com', 'pun');
INSERT INTO buyers (buyer_id, username, email, address) VALUES (6, 'user6', 'user6@example.com', 'mum');

-- Create products table
CREATE TABLE IF NOT EXISTS products (
  product_id INT PRIMARY KEY,
  name TEXT,
  category TEXT,
  price INT
);

-- Insert data into products table
INSERT INTO products (product_id, name, category, price) VALUES (1, 'coffee maker', 'appliances', 60);
INSERT INTO products (product_id, name, category, price) VALUES (2, 'phone', 'electronics', 300);
INSERT INTO products (product_id, name, category, price) VALUES (3, 'led tv', 'electronics', 600);
INSERT INTO products (product_id, name, category, price) VALUES (4, 'running shoes', 'apparel', 100);
INSERT INTO products (product_id, name, category, price) VALUES (5, 'oven', 'appliances', 500);

-- Create purchase_history table
CREATE TABLE IF NOT EXISTS purchase_history (
  transactionID INT PRIMARY KEY,
  buyer_id INT,
  product_id INT,
  quantity INT,
  total_amount INT,
  purchase_date TIMESTAMP
);

-- Insert data into purchase_history table
INSERT INTO purchase_history (transactionID, buyer_id, product_id, quantity, total_amount, purchase_date)
VALUES (1, 1, 5, 2, 800, toTimestamp(now()));
INSERT INTO purchase_history (transactionID, buyer_id, product_id, quantity, total_amount, purchase_date)
VALUES (2, 1, 4, 4, 400, toTimestamp(now()));
INSERT INTO purchase_history (transactionID, buyer_id, product_id, quantity, total_amount, purchase_date)
VALUES (3, 2, 4, 1, 100, toTimestamp(now()));
INSERT INTO purchase_history (transactionID, buyer_id, product_id, quantity, total_amount, purchase_date)
VALUES (4, 2, 1, 3, 180, toTimestamp(now()));
INSERT INTO purchase_history (transactionID, buyer_id, product_id, quantity, total_amount, purchase_date)
VALUES (5, 3, 3, 4, 2400, toTimestamp(now()));
INSERT INTO purchase_history (transactionID, buyer_id, product_id, quantity, total_amount, purchase_date)
VALUES (6, 4, 2, 2, 600, toTimestamp(now()));

-- ==============================
-- QUERIES SECTION
-- ==============================

-- 1. Retrieve buyerâ€™s purchase history (buyer_id = 1)
SELECT * FROM purchase_history WHERE buyer_id = 1 ALLOW FILTERING;

-- 2. Find total number of products
SELECT COUNT(product_id) FROM products;

-- 3. Retrieve total spending by a buyer (buyer_id = 2)
SELECT SUM(total_amount) FROM purchase_history WHERE buyer_id = 2 ALLOW FILTERING;

-- 4. Retrieve products by category ('electronics')
SELECT * FROM products WHERE category = 'electronics' ALLOW FILTERING;

-- 5. Find the maximum price
SELECT MAX(price) FROM products;

-- 6. Find total number of buyers
SELECT COUNT(buyer_id) FROM buyers;

-- 7. Find average price of products of a particular category ('electronics')
SELECT AVG(price) FROM products WHERE category = 'electronics' ALLOW FILTERING;

-- 8. Select products in a particular price range (100 to 400)
SELECT * FROM products WHERE price >= 100 AND price <= 400 ALLOW FILTERING;

-- 9. Find number of buyers from a specific location ('pun')
SELECT COUNT(buyer_id) FROM buyers WHERE address = 'pun' ALLOW FILTERING;

-- 10. Find all the purchases of a particular product (product_id = 4)
SELECT * FROM purchase_history WHERE product_id = 4 ALLOW FILTERING;

-- 11. Find total amount obtained through sales of a particular product (product_id = 4)
SELECT SUM(total_amount) FROM purchase_history WHERE product_id = 4 ALLOW FILTERING;
